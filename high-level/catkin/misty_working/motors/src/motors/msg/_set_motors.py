"""autogenerated by genpy from motors/set_motors.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class set_motors(genpy.Message):
  _md5sum = "d463a3d4e476b6db5d0f3c3f3b980cf6"
  _type = "motors/set_motors"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Set these to true if the motor should be updated
bool fl_set
bool fr_set
bool bl_set
bool br_set
bool teleop_ON

# The absolute motor speeds to set (-128 to 127)
# TODO check that this is the correct range
int8 fl_speed
int8 fr_speed
int8 bl_speed
int8 br_speed

"""
  __slots__ = ['fl_set','fr_set','bl_set','br_set','teleop_ON','fl_speed','fr_speed','bl_speed','br_speed']
  _slot_types = ['bool','bool','bool','bool','bool','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fl_set,fr_set,bl_set,br_set,teleop_ON,fl_speed,fr_speed,bl_speed,br_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(set_motors, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.fl_set is None:
        self.fl_set = False
      if self.fr_set is None:
        self.fr_set = False
      if self.bl_set is None:
        self.bl_set = False
      if self.br_set is None:
        self.br_set = False
      if self.teleop_ON is None:
        self.teleop_ON = False
      if self.fl_speed is None:
        self.fl_speed = 0
      if self.fr_speed is None:
        self.fr_speed = 0
      if self.bl_speed is None:
        self.bl_speed = 0
      if self.br_speed is None:
        self.br_speed = 0
    else:
      self.fl_set = False
      self.fr_set = False
      self.bl_set = False
      self.br_set = False
      self.teleop_ON = False
      self.fl_speed = 0
      self.fr_speed = 0
      self.bl_speed = 0
      self.br_speed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5B4b.pack(_x.fl_set, _x.fr_set, _x.bl_set, _x.br_set, _x.teleop_ON, _x.fl_speed, _x.fr_speed, _x.bl_speed, _x.br_speed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.fl_set, _x.fr_set, _x.bl_set, _x.br_set, _x.teleop_ON, _x.fl_speed, _x.fr_speed, _x.bl_speed, _x.br_speed,) = _struct_5B4b.unpack(str[start:end])
      self.fl_set = bool(self.fl_set)
      self.fr_set = bool(self.fr_set)
      self.bl_set = bool(self.bl_set)
      self.br_set = bool(self.br_set)
      self.teleop_ON = bool(self.teleop_ON)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5B4b.pack(_x.fl_set, _x.fr_set, _x.bl_set, _x.br_set, _x.teleop_ON, _x.fl_speed, _x.fr_speed, _x.bl_speed, _x.br_speed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.fl_set, _x.fr_set, _x.bl_set, _x.br_set, _x.teleop_ON, _x.fl_speed, _x.fr_speed, _x.bl_speed, _x.br_speed,) = _struct_5B4b.unpack(str[start:end])
      self.fl_set = bool(self.fl_set)
      self.fr_set = bool(self.fr_set)
      self.bl_set = bool(self.bl_set)
      self.br_set = bool(self.br_set)
      self.teleop_ON = bool(self.teleop_ON)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5B4b = struct.Struct("<5B4b")
