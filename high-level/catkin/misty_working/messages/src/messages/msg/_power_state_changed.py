"""autogenerated by genpy from messages/power_state_changed.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class power_state_changed(genpy.Message):
  _md5sum = "7f7505c0b2499fcf6c85ecc5dee6164e"
  _type = "messages/power_state_changed"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#32-bit integer with current voltage info
uint32 voltage
#power percentage [0-100]
uint32 percentage
#current draw in mW
uint32 draw
#are we on external power?
bool externalpower
#is the battery at a warning state?
bool warning
#is the battery at a critical state?
bool critical


"""
  __slots__ = ['voltage','percentage','draw','externalpower','warning','critical']
  _slot_types = ['uint32','uint32','uint32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       voltage,percentage,draw,externalpower,warning,critical

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(power_state_changed, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.voltage is None:
        self.voltage = 0
      if self.percentage is None:
        self.percentage = 0
      if self.draw is None:
        self.draw = 0
      if self.externalpower is None:
        self.externalpower = False
      if self.warning is None:
        self.warning = False
      if self.critical is None:
        self.critical = False
    else:
      self.voltage = 0
      self.percentage = 0
      self.draw = 0
      self.externalpower = False
      self.warning = False
      self.critical = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I3B.pack(_x.voltage, _x.percentage, _x.draw, _x.externalpower, _x.warning, _x.critical))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.voltage, _x.percentage, _x.draw, _x.externalpower, _x.warning, _x.critical,) = _struct_3I3B.unpack(str[start:end])
      self.externalpower = bool(self.externalpower)
      self.warning = bool(self.warning)
      self.critical = bool(self.critical)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I3B.pack(_x.voltage, _x.percentage, _x.draw, _x.externalpower, _x.warning, _x.critical))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.voltage, _x.percentage, _x.draw, _x.externalpower, _x.warning, _x.critical,) = _struct_3I3B.unpack(str[start:end])
      self.externalpower = bool(self.externalpower)
      self.warning = bool(self.warning)
      self.critical = bool(self.critical)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I3B = struct.Struct("<3I3B")
