"""autogenerated by genpy from messages/bom.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class bom(genpy.Message):
  _md5sum = "836b6497748f49619e3b3d0f035baf77"
  _type = "messages/bom"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 sender
int8 send_dir
int8 recv_dir

# @todo these may need to be changed
int8 FRONT = 0
int8 LEFT  = 1
int8 BACK  = 2
int8 RIGHT = 3

"""
  # Pseudo-constants
  FRONT = 0
  LEFT = 1
  BACK = 2
  RIGHT = 3

  __slots__ = ['sender','send_dir','recv_dir']
  _slot_types = ['int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sender,send_dir,recv_dir

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bom, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sender is None:
        self.sender = 0
      if self.send_dir is None:
        self.send_dir = 0
      if self.recv_dir is None:
        self.recv_dir = 0
    else:
      self.sender = 0
      self.send_dir = 0
      self.recv_dir = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3b.pack(_x.sender, _x.send_dir, _x.recv_dir))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.sender, _x.send_dir, _x.recv_dir,) = _struct_3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3b.pack(_x.sender, _x.send_dir, _x.recv_dir))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.sender, _x.send_dir, _x.recv_dir,) = _struct_3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3b = struct.Struct("<3b")
